using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using System.Collections;

//ЗАЧТЕНО
/* Задания_ Регулярные выражения
1. Необходимо обернуть повторяющиеся слово в<strong> элемент.Например, строка this is is a testдолжна быть преобразована
в this is <strong>is</strong> a test.
*/

namespace RegexArrea
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.SetWindowSize(110, 20);
            Console.WriteLine("Введите строку для тестирования на повторяющиеся слова:");
            StringBuilder castLine = new StringBuilder(Console.ReadLine());
            // Предварительная чистка строки: уберём возможные лишние пробелы
            string pattern = "\\s+";
            string replaceLine = " ";
            Regex rx = new Regex(pattern);
            string testLine = rx.Replace(castLine.ToString(), replaceLine);
            // Теперь можем вводить строку с нерегулярными пробелами по тексту!
            Regex rgx = new Regex(@"\b(?<word>\w+)\s+(\k<word>)\b", RegexOptions.IgnoreCase);
            castLine = new StringBuilder(testLine);
            
            MatchCollection searchLine = rgx.Matches(testLine);
          
            // Посмотрим сколько совпадений обнаружено.
            Console.WriteLine("{0} matches found in:\n{1}", searchLine.Count,testLine);

            // Можем просмотреть каждое. 
            int let, insertsimbols = 0;
            foreach (Match match in searchLine)
            {
                GroupCollection groups = match.Groups;
                //Console.WriteLine("'{0}' repeated at positions {1} and {2}",
                //                  groups["word"].Value,
                //                  groups[0].Index,
                //                  groups[1].Index);
                let = groups[1].Index - groups[0].Index-1;
                castLine.Insert(groups[1].Index+8*insertsimbols, "<strong>");
                insertsimbols++;
                //Console.WriteLine(castLine.Insert(groups[1].Index+let + 8*insertsimbols, "<strong>"));
                castLine.Insert(groups[1].Index + let + 8 * insertsimbols, "<strong>");
                insertsimbols++;
              }
            Console.WriteLine("\nИ ещё раз к строке оригиналу:\n\"{0}\"!", castLine);
                        
        } 
    }
}
